syntax = "proto3";

package com.duan.session;

import "com/duan/session/session.proto";
import "com/duan/session/parliamentary.proto";

message SessionData {
    Session session = 1;
    Parliamentary user = 2;
}

message JoinRequest {
    int64 session_id = 1;
    string user_id = 2;
}

message JoinResponse {
    SessionData data = 1;
}

message LeaveRequest {
    int64 session_id = 1;
    string user_id = 2;
}

message LeaveResponse {
    SessionData data = 1;
}

message RefreshStatusRequest {
    int64 session_id = 1;
    string user_id = 2;
}

message RefreshStatusResponse {
    SessionData data = 1;
}

message PauseRequest {
    int64 session_id = 1;
    string user_id = 2;
}

message PauseResponse {
    SessionData data = 1;
}

message ParliamentaryCountInSessionRequest {
    int64 session_id = 1;
}

message ParliamentaryCountInSessionResponse {
    int64 count = 1;
}

message CreateRequest {
    SessionType type = 1;
    string topic = 2;
}

message CreateResponse {
    int64 session_id = 1;
}

message OpenRequest {
    int64 session_id = 2;
}

message OpenResponse {
    SessionStatus status = 1;
    int64 session_id = 2;
}

message CloseRequest {
    int64 session_id = 2;
}

message CloseResponse {
    SessionStatus status = 1;
    int64 session_id = 2;
}

service SessionService {

    rpc Create (CreateRequest) returns (CreateResponse) {
    }

    rpc Open (OpenRequest) returns (OpenResponse) {
    }

    rpc Close (CloseRequest) returns (CloseResponse) {
    }

    // only count parliamentary.status is OPEN and PENDING
    rpc ParliamentaryCountInSession (ParliamentaryCountInSessionRequest) returns (ParliamentaryCountInSessionResponse) {
    }

    rpc Join (JoinRequest) returns (JoinResponse) {
    }

    // if in pending, will reactive, update reactive_time
    rpc RefreshStatus (RefreshStatusRequest) returns (RefreshStatusResponse) {
    }

    rpc Pause (PauseRequest) returns (PauseResponse) {
    }

    rpc Leave (LeaveRequest) returns (LeaveResponse) {
    }
}